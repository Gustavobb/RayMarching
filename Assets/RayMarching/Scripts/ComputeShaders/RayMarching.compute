#pragma kernel CSMain
#include "IncludeFiles/SDFs.cginc"
#include "IncludeFiles/Effects.cginc"

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _Light;
float3 _LightColor;
float _LightIntensity;
bool positionLight;

float3 _AmbientLightColor;
float _AmbientLightIntensity;

float _Time;

static const float maxDst = 200;
static const float epsilon = 0.001f;
static const float shadowBias = epsilon * 50;
static bool outline = false;

struct Shape
{
    float3 position;
    float3 size;
    float3 colour;
    float3 infiniteOffset;
    float4x4 rotationMatrix;
    int shapeType;
    int repeatInfinite;
    int operation;
    float blendStrength;
    float bendStrength;
    float roundStrength;
    float twistStrength;
    float displacementStrength;
    int hasOutline;
    float3 outlineColour;
    float outlineWidth;
    int numChildren;
};

StructuredBuffer<Shape> shapes;
int numShapes;

struct Ray 
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) 
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) 
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, int operation, float blendStrength)
{
    float dst = dstA;
    float3 colour = colourA;
    float4 result = float4(0, 0, 0, 0);

    // division by 0?
    if (blendStrength == 0.0)
        blendStrength = epsilon;

    // Cut
    if (operation == 0)
        result = SmoothSubtraction(dstB, dstA, colourB, colourA, blendStrength);

    //Mask
    else if (operation == 1)
        result = SmoothIntersection(dstA, dstB, colourA, colourB, blendStrength);

    // Union
    else if (operation == 2)
        result = SmoothUnion(dstA, dstB, colourA, colourB, blendStrength);

    return result;
}

float GetShapeDistance(int shapeType, float roundStrength, float3 size, float3 p)
{
    float distance = maxDst;
    float minSize = min(size.x, min(size.y, size.z));

    if (shapeType == 0)
        distance = SphereDistance(p / size) * minSize;
    
    else if (shapeType == 1)
        distance = CubeDistance(p, size);
    
    else if (shapeType == 2)
        distance = TorusDistance(p / size, .4) * minSize;
    
    else if (shapeType == 3)
        distance = PyramidDistance(p / size) * minSize;
    
    else if (shapeType == 4)
        distance = CappedCylinderDistance(p / size) * minSize;
    
    else if (shapeType == 5)
        distance = ConeDistance(p / size) * minSize;
    
    else if (shapeType == 6)
        distance = VerticalCapsuleDistance(p / size) * minSize;
    
    return distance - roundStrength;
}

float GetDistance(Shape shape, float3 eye) 
{
    float3 p = mul(float4(shape.position - eye, 1), shape.rotationMatrix).xyz;

    if (shape.repeatInfinite > 0.0)
        p = InfiniteRep(p, shape.size, shape.infiniteOffset);
    
    if (shape.bendStrength > 0.0)
        p = CheapBend(p, shape.bendStrength);
    
    if (shape.twistStrength > 0.0)
        p = Twist(p, shape.twistStrength);
    
    float dist = GetShapeDistance(shape.shapeType, shape.roundStrength, shape.size, p);

    if (shape.displacementStrength > 0.0)
        dist = Displace(dist, p, shape.displacementStrength);

    return dist;
}

float4 SceneInfo(float3 eye) 
{
    float globalDst = maxDst;
    float3 globalColour = 1;
    
    for (int i = 0; i < numShapes; i ++)
    {
        Shape shape = shapes[i];
        float localDst = GetDistance(shape, eye);
        float3 localColour = shape.colour;
        
        if (shape.hasOutline && (localDst >= epsilon && localDst < shape.outlineWidth))
        {
            localColour = shape.outlineColour;
            outline = true;
        }

        float4 globalCombined = Combine(globalDst, localDst, globalColour, localColour, shape.operation, shape.blendStrength);
        globalColour = globalCombined.xyz;
        globalDst = globalCombined.w; 
    }

    return float4(globalColour, globalDst);
}

float3 EstimateNormal(float3 p) 
{
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)).w - SceneInfo(float3(p.x - epsilon, p.y, p.z)).w;
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)).w - SceneInfo(float3(p.x, p.y - epsilon, p.z)).w;
    float z = SceneInfo(float3(p.x, p.y , p.z + epsilon)).w - SceneInfo(float3(p.x, p.y, p.z - epsilon)).w;
    return normalize(float3(x, y, z));
}

float CalculateShadow(Ray ray, float dstToShadePoint) 
{
    float rayDst = 0;
    int marchSteps = 0;
    float shadowIntensity = .2;
    float brightness = 1;

    while (rayDst < dstToShadePoint) 
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.w;
        
        if (dst <= epsilon)
            return shadowIntensity;

        brightness = min(brightness,dst * 200);

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    return shadowIntensity + (1 - shadowIntensity) * brightness;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width, height) * 2 - 1;
    float rayDst = 0;
    float dst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (rayDst < maxDst) 
    {
        marchSteps ++;
        float4 sceneInfo = SceneInfo(ray.origin);
        dst = sceneInfo.w;
        
        if (dst <= epsilon) 
        {
            // ambient light
            float3 ambientLight = _AmbientLightColor * _AmbientLightIntensity;

            // light
            float3 pointOnSurface = ray.origin + ray.direction * dst;
            float3 normal = EstimateNormal(pointOnSurface - ray.direction * epsilon);
            float3 lightDir = (positionLight) ? normalize(_Light - ray.origin): - _Light;
            float lighting = saturate(saturate(dot(normal, lightDir))) * _LightIntensity;
            float3 lightCol = _LightColor * lighting;
            
            // color
            float3 color = sceneInfo.xyz * ambientLight + sceneInfo.xyz * lightCol;
            
            // Shadow
            // float3 offsetPos = pointOnSurface + normal * shadowBias;
            // float3 dirToLight = (positionLight) ? normalize(_Light - offsetPos): - _Light;

            // ray.origin = offsetPos;
            // ray.direction = dirToLight;

            // float dstToLight = (positionLight) ? distance(offsetPos, _Light): maxDst;
            // float shadow = CalculateShadow(ray, dstToLight);

            // Destination[id.xy] = float4(color * shadow, 1);
            Destination[id.xy] = float4(color, 1);
            break;
        }

        else if (outline)
        {
            Destination[id.xy] = float4(sceneInfo.xyz, 1);
            outline = false;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
}